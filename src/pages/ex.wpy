<style lang='css'>
    page {
        height: 100%
    }

    .timer {
        font-size: 80px;
        color: #fff;
        margin-top: 30%;
    }

    .btn {
        width: 70px;
        height: 70px;
        background-repeat: no-repeat;
        background-color: #B0976E;
        background-position: 50% 50%;
        border-radius: 50%;
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
        margin-top: 30px;
    }

    .shadow {
        width: 80px;
        height: 80px;
        opacity: 0.6;
        margin-top: 25px;
    }

    .btn-wrap {
        width: 100%;
        height: 200px;
        position: relative;
    }

    .left-btn {
        margin-left: -100px;
    }

    .right-btn {
        margin-left: 100px;
    }

    .btn-image {
        width: 22px;
        height: 30px;
        margin-top: 3px;
        margin-left: 9px;
    }

    .image {
        height: 30px;
        width: 30px;
        background-repeat: no-repeat;
        margin-left: 15px;
        margin-top: 5px;
        background-size: cover;
    }

    .text {
        font-size: 16px;
        text-align: center;
        color: #fff;
        margin-top: 5px;
    }
</style>

<template>
    <view class="container ex" style="background-size:cover; background-image: url({{backgroundImage}})"
          @tap="pause">
        <view class="timer">{{showTime}}</view>
        <view class="btn-wrap {{isPause ? '' : 'hide'}}">
            <view>
                <view class="btn shadow left-btn"></view>

                <form report-submit="true" @submit="getFormId">
                    <button class="reset-button btn left-btn" form-type="submit" @tap.stop="goon">
                        <view class="image">
                            <image class="btn-image" src="/images/go-on.png"></image>
                        </view>
                        <view class="text">继续</view>
                    </button>
                </form>
            </view>
            <view>
                <view class="btn shadow right-btn"></view>
                <form report-submit="true" @submit="getFormId">
                    <button class="reset-button btn right-btn" form-type="submit" @tap.stop="end">
                        <view class="image">
                            <image class="btn-image" style="margin-left: 11px;" src="/images/stop-btn.png"></image>
                        </view>
                        <view class="text">结束</view>
                    </button>
                </form>
            </view>

        </view>
    </view>
</template>

<script>
    import wepy from 'wepy';
    import formIds from "../mixins/formIds";

    function playAudio(src, title, onEnded) {
        console.log(src + '' + title)
        const am = wx.getBackgroundAudioManager()
        am.onError((e) => {
            console.error(e)
        })
        am.onPlay(() => {
        })
        am.onEnded(() => {
            onEnded && onEnded()
        })
        am.title = title || src
        am.src = src
    }

    export default class Tag extends wepy.page {
        config = {
            disableScroll: true,
            navigationBarTitleText: "练习"
        };

        mixins = [formIds];

        data = {
            cost: 0,
            total: "",
            backgroundImage: "",
            isFinite: false,
            duration: 1,
            inBackground: false,
            needPowerManager: true,
            //started: false,
            isPause: "",
            screenBrightness: ""
        };

        computed = {
            showTime () {
                if (!this.isFinite && this.cost >= this.total) {
                    return "00:00";
                }

                let time = this.isFinite ? this.cost : this.total - this.cost;
                let h = Math.floor(time / 3600);
                time -= h * 3600;
                let m = Math.floor(time / 60);
                time -= m * 60;
                let s = time;

                let t = "";

                if (h > 0) {
                    t = ("00" + h + ":").substr(-3);
                }

                t += ("00" + m + ":").substr(-3);
                t += ("00" + s).substr(-2);

                return t;
            }
        };

        watch = {
            // isPause(value, oldValue) {
            //     if (oldValue !== value) {
            //         // 暂停
            //         if (value) {
            //             clearTimeout(this.dark);
            //             wx.setScreenBrightness({
            //                 value: this.screenBrightness
            //             });
            //         }
            //         // 开始
            //         else {
            //             wx.getScreenBrightness({
            //                 success: (o) => {
            //                     this.screenBrightness = o.value;
            //                     this.dark = setTimeout(() => {
            //                         wx.setScreenBrightness({
            //                             value: 0
            //                         });
            //                     }, 10000);
            //                 }
            //             });
            //         }
            //     }
            // }
        };

        methods = {
            pause () {
                //if (this.started) {
                wx.pauseBackgroundAudio();
                this.isPause = true;
                this.stopTiming();
                //}
            },
            goon () {
                this.playBackgroundAudio();
                this.isPause = false;
                this.timing();
            },
            end () {

            }
        };

        timing(immediate) {
            let run = () => {
                if (!this.isFinite && this.total - this.cost <= 0) {
                    this.end();
                }
                else {
                    this.stopTiming();
                    this.cost += this.duration;
                    this.timing();
                }

                this.$apply();
            };

            if (immediate) {
                run();
            }
            else {
                this.timer = setTimeout(run, this.duration * 1000);
            }
        }

        stopTiming () {
            //wx.pauseBackgroundAudio();
            clearTimeout(this.timer);
        }

        end () {
            let hour;
            let minute;
            let second;
            let cost = this.cost;

            hour = Math.floor(cost / 3600);
            cost -= hour * 3600;
            minute = Math.floor(cost / 60);
            cost -= minute * 60;
            second = cost;

            const exTime = this.$parent.globalData.exTime = hour * 60 + minute;

            const submitData = this.$parent.globalData.submitData = {
                timeSet: exTime * 60,
                trainMethodIds: this.$parent.globalData.trainMethodIds,
                musicId: this.$parent.globalData.musicId,
                addDuration: 0
            };

            wx.getNetworkType({
                success: (res) => {
                    const networkType = res.networkType
                    if (networkType === 'none' || networkType === 'unkonwn') {
                        const etoaArr = wx.getStorageSync('exTimeOfflineArray') || []
                        const extentObj = etoaArr.find(e => e.timeSet == submitData.timeSet && e.trainMethodIds == submitData.trainMethodIds)
                        if (!extentObj) {
                            etoaArr.push(submitData)

                            wx.setStorage({
                                key: 'exTimeOfflineArray',
                                data: etoaArr,
                                success: function (res) {
                                    console.log('本地存储 exTimeOfflineArray 成功')
                                }
                            })
                        }
                    }
                }
            });
            wx.stopBackgroundAudio();

            this.stopTiming();
            playAudio(this.$parent.globalData.resPerfix + '/res/music/end.mp3', 'end');

            // 跳转
            this.$parent.globalData.musicUrl = '';
            this.$parent.globalData.musicTitle = '';
            this.$redirect('./end');
        }

        onShow() {
            clearTimeout(this.inBackgroundTimer);
            let exStorage = wx.getStorageSync("ex_background");

            if (exStorage) {
                this.cost = exStorage.cost;
                this.isPause = exStorage.isPause;

                if (!this.isPause) {
                    const now = new Date().getTime();
                    this.cost += Math.floor((now - exStorage.time) / 1000);
                    this.duration = 1;
                    this.$apply();
                    this.timing();
                    this.playBackgroundAudio();
                    console.log(`切换到前台时已练习${this.cost}秒`);
                }

                wx.removeStorage({
                    key: "ex_background"
                });
            }
            else {
                this.timing();

                playAudio(this.$parent.globalData.resPerfix + '/res/music/begin.mp3', 'begin', () => {
                    this.playBackgroundAudio();
                });
            }
        }

        onHide() {
            //this.inBackground = true;
            this.inBackgroundTimer = setTimeout(() => {
                const time = new Date().getTime();
                this.stopTiming();
                console.log(`切换到后台时已练习${this.cost}秒`);

                wx.setStorage({
                    key: "ex_background",
                    data: {
                        time,
                        isPause: this.isPause,
                        cost: this.cost
                    }
                });
            }, 10000);
        }

        onLoad(params) {
            this.params = params;
            this.backgroundImage = this.$parent.globalData.backgroundImage;
            this.$parent.globalData.isInex = true;
            this.isPause = false;
            wx.hideShareMenu();

            if (this.params.isFinite === "true") {
                this.isFinite = true;
            }
            else {
                this.total = (parseInt(this.params.hour) || 0) * 3600 + (parseInt(this.params.minute) || 0) * 60 + (parseInt(this.params.second) || 0);
                //this.needPowerManager = this.total >= 5 * 60;//超过五分钟
            }
        }

        playBackgroundAudio () {
            if (this.$parent.globalData.musicUrl) {
                playAudio(this.$parent.globalData.musicUrl, this.$parent.globalData.musicTitle)
            }
        }
    }
</script>
