<style lang='css'>
  page {
    height: 100%
  }
  .timer {
    font-size:80px;
    color:#fff;
    margin-top:30%;
  }
  .btn {
    width:70px;
    height:70px;
    background-repeat:no-repeat;
    background-color: #B0976E;
    background-position:50% 50%;
    border-radius:50%;
    position:absolute;
    left:50%;
    transform: translateX(-50%);
    margin-top:30px;
  }
  .shadow {
    width:80px;
    height:80px;
    opacity:0.6;
    margin-top:25px;
  }
  .btn-wrap {
    width:100%;
    height:200px;
    position:relative;
  }
  .left-btn {
    margin-left:-100px;
  }
  .right-btn {
    margin-left:100px;
  }
  .btn-image {
    width:22px;
    height:30px;
    margin-top:3px;
    margin-left:9px;
  }
  .image {
    height:30px;
    width:30px;
    background-repeat:no-repeat;
    margin-left:15px;
    margin-top: 5px;
    background-size: cover;
  }
  .text {
    font-size:16px;
    text-align:center;
    color:#fff;
    margin-top:5px;
  }
</style>

<template>
  <view class="container ex" style="background-size:cover; background-image: url({{backgroundImage}})" @tap="onTapStop">
    <view class="timer">{{showTime}}</view>
    <view class="btn-wrap {{isPause ? '' : 'hide'}}">
      <view>
        <view class="btn shadow left-btn"></view>
        <view class="btn left-btn" @tap.stop="onGoon">
          <view class="image">
            <image class="btn-image" src="/images/go-on.png"></image>
          </view>
          <view class="text">继续</view>
        </view>
      </view>
      <view>
        <view class="btn shadow right-btn"></view>
        <view class="btn right-btn" @tap.stop="onEnd">
          <view class="image">
            <image class="btn-image" style="margin-left: 11px;" src="/images/stop-btn.png"></image>
          </view>
          <view class="text">结束</view>
        </view>
      </view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import moment from 'moment'
  import {ajax} from '../components/ajax.js'

  function setTime({hour, minute, second = 0, isFinite}) {
    let cHour = parseInt(hour, 10)

    if(cHour > 0 || isFinite) {
      return moment.utc().startOf('day').add({ seconds: hour * 3600 + minute * 60 + second}).format('HH:mm:ss');
    } else {
      return moment.utc().startOf('day').add({ seconds: hour * 3600 + minute * 60 + second}).format('mm:ss');
    }
  }

  const TIME = 100;
  function getMinusTime(d) {
    const dx = this._d = new Date(d.setSeconds(d.getSeconds() - 1))
    return {hour: dx.getHours(), minute: d.getMinutes(), second: d.getSeconds()}
  }

  function getPlusTime(d) {
    const dx = this._d = new Date(d.setSeconds(d.getSeconds() + 1))
    return {hour: dx.getHours(), minute: d.getMinutes(), second: d.getSeconds()}
  }

  /**
   * 获取练习时长
   * @param params
   * @param hour
   * @param minute
   * @returns {number}
   */
  function getExTime({params, hour, minute}) {
    let oHour = parseInt(params.hour, 10)
    let oMinute = parseInt(params.minute, 10)
    let cMinute = parseInt(minute, 10)
    let cHour = parseInt(hour, 10)
    let isFinite = params.isFinite
    let res = 0

    if(isFinite) {
      res += (cHour - oHour) * 60 + cMinute - oMinute
    } else {
      if(cMinute - oMinute < 0) {
        cHour -= 1
        cMinute += 60
      }

      res += (oHour - cHour) * 60 + oMinute - cMinute
    }

    const second = this._d.getSeconds()

    return res >= 1 && second !== 0 ? isFinite ? res : res - 1 : res
  }

  function onEnd() {
    // 保存结果
    this.isEnd = true;
    const exTime = this.$parent.globalData.exTime = getExTime.call(this, {params: this.params, hour: this.curTime.hour, minute: this.curTime.minute})
    wx.stopBackgroundAudio()

    const submitData = this.$parent.globalData.submitData = {
      timeSet: exTime * 60,
      trainMethodIds: this.$parent.globalData.trainMethodIds,
      musicId: this.$parent.globalData.musicId,
      addDuration: 0
    }

    wx.getNetworkType({
      success: (res) => {
        const networkType = res.networkType
        if(networkType === 'none' || networkType === 'unkonwn') {
          const etoaArr = wx.getStorageSync('exTimeOfflineArray') || []
          const extentObj = etoaArr.find(e => e.timeSet == submitData.timeSet && e.trainMethodIds == submitData.trainMethodIds)
          if (!extentObj) {
            etoaArr.push(submitData)

            wx.setStorage({
              key: 'exTimeOfflineArray',
              data: etoaArr,
              success: function(res){
                console.log('本地存储 exTimeOfflineArray 成功')
              }
            })
          }
        }
      }
    })

    playAudio(this.$parent.globalData.resPerfix + 'res/music/end.mp3', 'end')

    // 跳转
    this.$parent.globalData.musicUrl = ''
    this.$parent.globalData.musicTitle = ''
    this.$redirect('./end')
  }

  function playAudio(src, title, onEnded) {
    console.log(src + '' + title)
    const am = wx.getBackgroundAudioManager()
    am.onError((e) => {
      console.error(e)
    })
    am.onPlay(() => {
    })
    am.onEnded(() => {
      onEnded && onEnded()
    })
    am.title = title || src
    am.src = src
  }
  const onTapStop = function() {
    this.isPause = true
    clearInterval(this.timer)
    this.timer = ''
    wx.pauseBackgroundAudio()
  }

  const d = new Date()
  export default class Tag extends wepy.page {
    config = {
      disableScroll: true,
      navigationBarTitleText: '练习'
    }
    data = {
      showTime: '',
      isEnd: false,
      isPause: false,
      backgroundImage: '',
      isFinite: false,
      curTime: {
        hour: 0,
        minute: 0
      }
    }
    onHide() {
      // onTapStop.call(this)
    }
    onLoad(params) {
      wx.setKeepScreenOn({
        keepScreenOn: true,
      })

      this.$parent.globalData.isInex = true
      wx.hideShareMenu()
      playAudio(this.$parent.globalData.resPerfix + 'res/music/begin.mp3', 'begin', () => {
        if(this.$parent.globalData.musicUrl) {
          playAudio(this.$parent.globalData.musicUrl, this.$parent.globalData.musicTitle)
        }
      })
      this.params = params;
      this._d = null;
      const hour = parseInt(this.params.hour, 10)
      this.params.isFinite = this.isFinite = this.params.isFinite === 'true'
      this.backgroundImage = this.$parent.globalData.backgroundImage;
      this.showTime = setTime(this.params)

      if(this.timer) clearInterval(this.timer)
      this.timer = setInterval(() => {
        if(!this._d) this._d = new Date([d.getFullYear(), d.getMonth(), d.getDate()].join('/') + ' ' + ((hour > 0 || this.isFinite) ? this.showTime : ('00:' + this.showTime)))
        const minusTime = this.curTime = this.isFinite ? getPlusTime.call(this, this._d) : getMinusTime.call(this, this._d)
        // 如果都是0结束
        if(minusTime.hour === 0 && minusTime.minute === 0 && minusTime.second === 0) {
          clearInterval(this.timer)
          this.timer = ''
          onEnd.call(this)
        }
        this.showTime = setTime(Object.assign(minusTime, {isFinite: this.isFinite}))
        this.$apply()
      }, TIME)
    }
    methods = {
      onTapStop() {
        onTapStop.call(this)
      },
      onGoon() {
        if(this.timer) return
        const hour = parseInt(this.params.hour, 10)
        wx.playBackgroundAudio()

        const timer = setInterval(() => {
          let dVal = [d.getFullYear(), d.getMonth(), d.getDate()].join('/') + ' ' + ((this.showTime.length > 5 || this.isFinite) ? this.showTime : ('00:' + this.showTime))
          this._d = new Date(dVal)
          const minusTime = this.curTime = this.isFinite ? getPlusTime.call(this, this._d) : getMinusTime.call(this, this._d)
          // 如果都是0结束
          if(minusTime.hour === 0 && minusTime.minute === 0 && minusTime.second === 0) {
            clearInterval(this.timer)
            this.timer = ''
            onEnd.call(this)
          }
          this.showTime = setTime(Object.assign(minusTime, {isFinite: this.isFinite}))
          this.$apply()
        }, TIME)

       this.timer = timer
        this.isPause = false
      },
      onEnd() {
        onEnd.call(this)
      }
    }
  }
</script>
